// netlify/functions/process-payment.js
const axios = require('axios');
const { Formidable } = require('formidable');
const nodemailer = require('nodemailer');
const { createClient } = require('@supabase/supabase-js');
const { Readable } = require('stream'); // Importar Readable para Streams
const fs = require('fs'); // MÃ³dulo para operaciones con archivos
const FormData = require('form-data'); // Para construir FormData para envÃ­os a Telegram

exports.handler = async function(event, context) {
Â  Â  if (event.httpMethod !== "POST") {
Â  Â  Â  Â  return { statusCode: 405, body: "Method Not Allowed" };
Â  Â  }

Â  Â  let data;
Â  Â  let paymentReceiptFile; 

Â  Â  // --- ConfiguraciÃ³n de Supabase ---
Â  Â  const supabaseUrl = process.env.SUPABASE_URL;
Â  Â  const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;
Â  Â  const supabase = createClient(supabaseUrl, supabaseServiceKey);

Â  Â  // --- Parsing de FormData con formidable ---
Â  Â  const form = new Formidable({ multiples: true });

Â  Â  let bodyBuffer;
Â  Â  if (event.isBase64Encoded) {
Â  Â  Â  Â  bodyBuffer = Buffer.from(event.body, 'base64');
Â  Â  } else {
Â  Â  Â  Â  bodyBuffer = Buffer.from(event.body || '');
Â  Â  }

Â  Â  const reqStream = new Readable();
Â  Â  reqStream.push(bodyBuffer);
Â  Â  reqStream.push(null);

Â  Â  reqStream.headers = event.headers;
Â  Â  reqStream.method = event.httpMethod;

Â  Â  try {
Â  Â  Â  Â  if (event.headers['content-type'] && event.headers['content-type'].includes('multipart/form-data')) {
Â  Â  Â  Â  Â  Â  const { fields, files } = await new Promise((resolve, reject) => {
Â  Â  Â  Â  Â  Â  Â  Â  form.parse(reqStream, (err, fields, files) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (err) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  console.error('Formidable parse error:', err);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return reject(err); 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  resolve({ fields, files });
Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  });

Â  Â  Â  Â  Â  Â  // Formidable v3+ devuelve campos y archivos como arrays. Extraer el primer valor.
Â  Â  Â  Â  Â  Â  data = Object.fromEntries(Object.entries(fields).map(([key, value]) => [key, Array.isArray(value) ? value[0] : value]));
Â  Â  Â  Â  Â  Â  paymentReceiptFile = files['paymentReceipt'] ? files['paymentReceipt'][0] : null;

Â  Â  Â  Â  } else if (event.headers['content-type'] && event.headers['content-type'].includes('application/json')) {
Â  Â  Â  Â  Â  Â  data = JSON.parse(event.body);
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  const { parse } = require('querystring');
Â  Â  Â  Â  Â  Â  data = parse(event.body);
Â  Â  Â  Â  }
Â  Â  } catch (parseError) {
Â  Â  Â  Â  console.error("Error al procesar los datos de la solicitud:", parseError);
Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  statusCode: 400,
Â  Â  Â  Â  Â  Â  body: JSON.stringify({ message: `Error al procesar los datos de la solicitud: ${parseError.message || 'Unknown error'}. Por favor, verifica tus datos e intÃ©ntalo de nuevo.` })
Â  Â  Â  Â  };
Â  Â  }

Â  Â  // --- TEMPORAL: LOGS PARA DEBUGGING DE VARIABLES DE ENTORNO ---
Â  Â  console.log("DEBUG: TELEGRAM_BOT_TOKEN existe:", !!process.env.TELEGRAM_BOT_TOKEN);
Â  Â  console.log("DEBUG: TELEGRAM_CHAT_ID existe:", !!process.env.TELEGRAM_CHAT_ID);
Â  Â  console.log("DEBUG: SMTP_HOST:", process.env.SMTP_HOST);
Â  Â  console.log("DEBUG: SMTP_PORT:", process.env.SMTP_PORT);
Â  Â  console.log("DEBUG: SMTP_USER:", process.env.SMTP_USER);
Â  Â  console.log("DEBUG: SMTP_PASS (length):", process.env.SMTP_PASS ? process.env.SMTP_PASS.length : 'N/A');
Â  Â  console.log("DEBUG: SUPABASE_URL existe:", !!process.env.SUPABASE_URL);
Â  Â  console.log("DEBUG: SUPABASE_SERVICE_KEY existe:", !!process.env.SUPABASE_SERVICE_KEY);
Â  Â  // --- FIN TEMPORAL ---

Â  Â  // AsegÃºrate de que las variables de entorno estÃ©n configuradas
Â  Â  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
Â  Â  const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
Â  Â  const SMTP_HOST = process.env.SMTP_HOST;
Â  Â  const SMTP_PORT = process.env.SMTP_PORT;
Â  Â  const SMTP_USER = process.env.SMTP_USER;
Â  Â  const SMTP_PASS = process.env.SMTP_PASS;
Â  Â  const SENDER_EMAIL = process.env.SENDER_EMAIL || SMTP_USER;

Â  Â  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID || !SMTP_HOST || !parseInt(SMTP_PORT, 10) || !SMTP_USER || !SMTP_PASS || !supabaseUrl || !supabaseServiceKey) {
Â  Â  Â  Â  console.error("Faltan variables de entorno requeridas o SMTP_PORT no es un nÃºmero vÃ¡lido.");
Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  statusCode: 500,
Â  Â  Â  Â  Â  Â  body: JSON.stringify({ message: "Error de configuraciÃ³n del servidor: Faltan credenciales o configuraciÃ³n invÃ¡lida." })
Â  Â  Â  Â  };
Â  Â  }

Â  Â  // Extraer datos del formulario (ya procesados por formidable)
Â  Â  const { game, playerId, package: packageName, finalPrice, currency, paymentMethod, email, whatsappNumber } = data;
Â  Â  // NUEVO: Extraer campos especÃ­ficos para Roblox
Â  Â  const robloxEmail = data.robloxEmail || null;
Â  Â  const robloxPassword = data.robloxPassword || null;

Â  Â  let methodSpecificDetails = {};
Â  Â  if (paymentMethod === 'pago-movil') {
Â  Â  Â  Â  methodSpecificDetails.phone = data.phone;
Â  Â  Â  Â  methodSpecificDetails.reference = data.reference;
Â  Â  } else if (paymentMethod === 'binance') {
Â  Â  Â  Â  methodSpecificDetails.txid = data.txid;
Â  Â  } else if (paymentMethod === 'zinli') {
Â  Â  Â  Â  methodSpecificDetails.reference = data.reference;
Â  Â  }

Â  Â  // --- Guardar TransacciÃ³n Inicial en Supabase ---
Â  Â  let newTransactionData;
Â  Â  let id_transaccion_generado; // ID Ãºnico generado para la transacciÃ³n

Â  Â  try {
Â  Â  Â  Â  id_transaccion_generado = `MALOK-${Date.now()}`; // Generar un ID Ãºnico simple para la transacciÃ³n

Â  Â  Â  Â  const transactionToInsert = {
Â  Â  Â  Â  Â  Â  id_transaccion: id_transaccion_generado,
Â  Â  Â  Â  Â  Â  game: game,
Â  Â  Â  Â  Â  Â  playerId: playerId || null,
Â  Â  Â  Â  Â  Â  packageName: packageName,
Â  Â  Â  Â  Â  Â  finalPrice: parseFloat(finalPrice),
Â  Â  Â  Â  Â  Â  currency: currency,
Â  Â  Â  Â  Â  Â  paymentMethod: paymentMethod,
Â  Â  Â  Â  Â  Â  email: email,
Â  Â  Â  Â  Â  Â  whatsappNumber: whatsappNumber || null,
Â  Â  Â  Â  Â  Â  methodDetails: methodSpecificDetails,
Â  Â  Â  Â  Â  Â  status: 'pendiente', // Estado inicial de la transacciÃ³n
Â  Â  Â  Â  Â  Â  telegram_chat_id: TELEGRAM_CHAT_ID,
Â  Â  Â  Â  Â  Â  // telegram_message_id: null, // Se actualizarÃ¡ despuÃ©s de enviar el mensaje a Telegram
Â  Â  Â  Â  Â  Â  receipt_url: paymentReceiptFile ? paymentReceiptFile.filepath : null 
Â  Â  Â  Â  };

Â  Â  Â  Â  // NUEVO: AÃ±adir campos de Roblox si el juego es Roblox
Â  Â  Â  Â  if (game === 'Roblox') {
Â  Â  Â  Â  Â  Â  transactionToInsert.robloxEmail = robloxEmail;
Â  Â  Â  Â  Â  Â  transactionToInsert.robloxPassword = robloxPassword;
Â  Â  Â  Â  }

Â  Â  Â  Â  const { data: insertedData, error: insertError } = await supabase
Â  Â  Â  Â  Â  Â  .from('transactions') // AsegÃºrate de que 'transactions' es el nombre correcto de tu tabla en Supabase
Â  Â  Â  Â  Â  Â  .insert(transactionToInsert)
Â  Â  Â  Â  Â  Â  .select();

Â  Â  Â  Â  if (insertError) {
Â  Â  Â  Â  Â  Â  throw insertError;
Â  Â  Â  Â  }
Â  Â  Â  Â  newTransactionData = insertedData[0];
Â  Â  Â  Â  console.log("TransacciÃ³n guardada en Supabase con ID interno:", newTransactionData.id);

Â  Â  } catch (supabaseError) {
Â  Â  Â  Â  console.error("Error al guardar la transacciÃ³n en Supabase:", supabaseError.message);
Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  statusCode: 500,
Â  Â  Â  Â  Â  Â  body: JSON.stringify({ message: "Error al guardar la transacciÃ³n en la base de datos." })
Â  Â  Â  Â  };
Â  Â  }

Â  Â  // --- Enviar NotificaciÃ³n a Telegram ---
Â  Â  let messageText = `âœ¨ Nueva Recarga Malok Recargas âœ¨\n\n`;
Â  Â  messageText += `*ID de TransacciÃ³n:* \`${id_transaccion_generado || 'N/A'}\`\n`;
Â  Â  messageText += `*Estado:* \`PENDIENTE\`\n\n`;
Â  Â  messageText += `ðŸŽ® Juego: *${game}*\n`;
Â  Â  // MODIFICADO: AÃ±adir campos de Roblox si existen, de lo contrario mostrar ID de Jugador
Â  Â  if (game === 'Roblox') {
Â  Â  Â  Â  messageText += `ðŸ“§ Correo Roblox: ${robloxEmail || 'N/A'}\n`;
Â  Â  Â  Â  messageText += `ðŸ”‘ ContraseÃ±a Roblox: ${robloxPassword || 'N/A'}\n`;
Â  Â  } else {
Â  Â  Â  Â  messageText += `ðŸ‘¤ ID de Jugador: *${playerId || 'N/A'}*\n`;
Â  Â  }
Â  Â  messageText += `ðŸ“¦ Paquete: *${packageName}*\n`;
Â  Â  messageText += `ðŸ’° Total a Pagar: *${finalPrice} ${currency}*\n`;
Â  Â  messageText += `ðŸ’³ MÃ©todo de Pago: *${paymentMethod.replace('-', ' ').toUpperCase()}*\n`;
Â  Â  messageText += `ðŸ“§ Correo Cliente: ${email}\n`;
Â  Â  if (whatsappNumber) {
Â  Â  Â  Â  messageText += `ðŸ“± WhatsApp Cliente: ${whatsappNumber}\n`;
Â  Â  }

Â  Â  // Detalles especÃ­ficos del mÃ©todo de pago
Â  Â  if (paymentMethod === 'pago-movil') {
Â  Â  Â  Â  messageText += `ðŸ“ž TelÃ©fono Pago MÃ³vil: ${methodSpecificDetails.phone || 'N/A'}\n`;
Â  Â  Â  Â  messageText += `ðŸ“Š Referencia Pago MÃ³vil: ${methodSpecificDetails.reference || 'N/A'}\n`;
Â  Â  } else if (paymentMethod === 'binance') {
Â  Â  Â  Â  messageText += `ðŸ†” TXID Binance: ${methodSpecificDetails.txid || 'N/A'}\n`;
Â  Â  } else if (paymentMethod === 'zinli') {
Â  Â  Â  Â  messageText += `ðŸ“Š Referencia Zinli: ${methodSpecificDetails.reference || 'N/A'}\n`;
Â  Â  }

Â  Â  // Botones inline para Telegram
Â  Â  const replyMarkup = {
Â  Â  Â  Â  inline_keyboard: [
Â  Â  Â  Â  Â  Â  [{ text: "âœ… Marcar como Realizada", callback_data: `mark_done_${id_transaccion_generado}` }]
Â  Â  Â  Â  ]
Â  Â  };

Â  Â  const telegramApiUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
Â  Â  let telegramMessageResponse;

Â  Â  try {
Â  Â  Â  Â  telegramMessageResponse = await axios.post(telegramApiUrl, {
Â  Â  Â  Â  Â  Â  chat_id: TELEGRAM_CHAT_ID,
Â  Â  Â  Â  Â  Â  text: messageText,
Â  Â  Â  Â  Â  Â  parse_mode: 'Markdown',
Â  Â  Â  Â  Â  Â  reply_markup: replyMarkup
Â  Â  Â  Â  });
Â  Â  Â  Â  console.log("Mensaje de Telegram enviado con Ã©xito.");

Â  Â  Â  Â  // --- Enviar comprobante de pago a Telegram si existe ---
Â  Â  Â  Â  if (paymentReceiptFile && paymentReceiptFile.filepath) {
Â  Â  Â  Â  Â  Â  console.log("DEBUG: Intentando enviar comprobante a Telegram.");
Â  Â  Â  Â  Â  Â  console.log("DEBUG: Ruta del archivo:", paymentReceiptFile.filepath);
Â  Â  Â  Â  Â  Â  console.log("DEBUG: Nombre original:", paymentReceiptFile.originalFilename);
Â  Â  Â  Â  Â  Â  console.log("DEBUG: Tipo MIME:", paymentReceiptFile.mimetype);

Â  Â  Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  Â  Â  const fileBuffer = fs.readFileSync(paymentReceiptFile.filepath);
Â  Â  Â  Â  Â  Â  Â  Â  console.log("DEBUG: TamaÃ±o del archivo (bytes):", fileBuffer.length);

Â  Â  Â  Â  Â  Â  Â  Â  const sendFileUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument`;
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  const formData = new FormData();
Â  Â  Â  Â  Â  Â  Â  Â  formData.append('chat_id', TELEGRAM_CHAT_ID);
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  // *** CORRECCIÃ“N: Crear un stream Readable a partir del Buffer ***
Â  Â  Â  Â  Â  Â  Â  Â  const fileStream = new Readable();
Â  Â  Â  Â  Â  Â  Â  Â  fileStream.push(fileBuffer);
Â  Â  Â  Â  Â  Â  Â  Â  fileStream.push(null); // Indica el fin del stream

Â  Â  Â  Â  Â  Â  Â  Â  formData.append('document', fileStream, { // Pasamos el stream
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  filename: paymentReceiptFile.originalFilename || 'comprobante_pago.jpg',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  contentType: paymentReceiptFile.mimetype || 'application/octet-stream',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  knownLength: fileBuffer.length // Importante para que FormData sepa el tamaÃ±o
Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  Â  Â  // *** FIN DE CORRECCIÃ“N ***

Â  Â  Â  Â  Â  Â  Â  Â  formData.append('caption', `Comprobante de pago para la transacciÃ³n ${id_transaccion_generado}`);

Â  Â  Â  Â  Â  Â  Â  Â  const response = await axios.post(sendFileUrl, formData, {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  headers: formData.getHeaders()
Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  Â  Â  console.log("Comprobante de pago enviado a Telegram. Respuesta:", response.data);
Â  Â  Â  Â  Â  Â  } catch (fileSendError) {
Â  Â  Â  Â  Â  Â  Â  Â  console.error("ERROR: Fallo al enviar el comprobante a Telegram.");
Â  Â  Â  Â  Â  Â  Â  Â  if (fileSendError.response) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  console.error("Detalles del error de respuesta de Telegram:", fileSendError.response.data);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  console.error("Estado del error de respuesta:", fileSendError.response.status);
Â  Â  Â  Â  Â  Â  Â  Â  } else if (fileSendError.request) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  console.error("No se recibiÃ³ respuesta de Telegram (la solicitud fue enviada):", fileSendError.request);
Â  Â  Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  console.error("Error al configurar la solicitud:", fileSendError.message);
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  console.log("DEBUG: No hay archivo de comprobante para enviar a Telegram o filepath no es vÃ¡lido.");
Â  Â  Â  Â  }

Â  Â  Â  Â  // --- Actualizar Transaction en Supabase con el Message ID de Telegram ---
Â  Â  Â  Â  if (newTransactionData && telegramMessageResponse && telegramMessageResponse.data && telegramMessageResponse.data.result) {
Â  Â  Â  Â  Â  Â  const { data: updatedData, error: updateError } = await supabase
Â  Â  Â  Â  Â  Â  Â  Â  .from('transactions')
Â  Â  Â  Â  Â  Â  Â  Â  .update({ telegram_message_id: telegramMessageResponse.data.result.message_id })
Â  Â  Â  Â  Â  Â  Â  Â  .eq('id', newTransactionData.id);

Â  Â  Â  Â  Â  Â  if (updateError) {
Â  Â  Â  Â  Â  Â  Â  Â  console.error("Error al actualizar la transacciÃ³n en Supabase con telegram_message_id:", updateError.message);
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  console.log("Transaction actualizada en Supabase con telegram_message_id:", telegramMessageResponse.data.result.message_id);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }

Â  Â  } catch (telegramError) {
Â  Â  Â  Â  console.error("Error al enviar mensaje de Telegram o comprobante:", telegramError.response ? telegramError.response.data : telegramError.message);
Â  Â  }

Â  Â  // --- Enviar ConfirmaciÃ³n por Correo ElectrÃ³nico al Cliente (con Nodemailer) ---
Â  Â  if (email) {
Â  Â  Â  Â  let transporter;
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  transporter = nodemailer.createTransport({
Â  Â  Â  Â  Â  Â  Â  Â  host: SMTP_HOST,
Â  Â  Â  Â  Â  Â  Â  Â  port: parseInt(SMTP_PORT, 10),
Â  Â  Â  Â  Â  Â  Â  Â  secure: parseInt(SMTP_PORT, 10) === 465,
Â  Â  Â  Â  Â  Â  Â  Â  auth: {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  user: SMTP_USER,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  pass: SMTP_PASS,
Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  Â  Â  tls: {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  rejectUnauthorized: false
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  } catch (createTransportError) {
Â  Â  Â  Â  Â  Â  console.error("Error al crear el transportador de Nodemailer:", createTransportError);
Â  Â  Â  Â  }

Â  Â  Â  Â  let playerInfoEmail = '';
Â  Â  Â  Â  // NUEVO: AÃ±adir detalles de Roblox al correo si corresponde
Â  Â  Â  Â  if (game === 'Roblox') {
Â  Â  Â  Â  Â  Â  playerInfoEmail = `
Â  Â  Â  Â  Â  Â  Â  Â  <li><strong>Correo de Roblox:</strong> ${robloxEmail}</li>
Â  Â  Â  Â  Â  Â  Â  Â  <li><strong>ContraseÃ±a de Roblox:</strong> ${robloxPassword}</li>
Â  Â  Â  Â  Â  Â  `;
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  playerInfoEmail = playerId ? `<li><strong>ID de Jugador:</strong> ${playerId}</li>` : '';
Â  Â  Â  Â  }

Â  Â  Â  Â  const mailOptions = {
Â  Â  Â  Â  Â  Â  from: SENDER_EMAIL,
Â  Â  Â  Â  Â  Â  to: email,
Â  Â  Â  Â  Â  Â  subject: `ðŸŽ‰ Tu Solicitud de Recarga de ${game} con Malok Recargas ha sido Recibida! ðŸŽ‰`,
Â  Â  Â  Â  Â  Â  html: `
Â  Â  Â  Â  Â  Â  Â  Â  <div style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 style="color: #007bff;">Â¡Hola!</h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p>Hemos recibido tu solicitud de recarga para <strong>${game}</strong> con ID: <strong>${id_transaccion_generado}</strong>.</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p>AquÃ­ estÃ¡n los detalles que nos proporcionaste:</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ul style="list-style: none; padding: 0;">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <li><strong>Juego:</strong> ${game}</li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ${playerInfoEmail}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <li><strong>Paquete:</strong> ${packageName}</li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <li><strong>Monto a Pagar:</strong> ${finalPrice} ${currency}</li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <li><strong>MÃ©todo de Pago Seleccionado:</strong> ${paymentMethod.replace('-', ' ').toUpperCase()}</li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ${whatsappNumber ? `<li><strong>NÃºmero de WhatsApp Proporcionado:</strong> ${whatsappNumber}</li>` : ''}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </ul>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p>Tu solicitud estÃ¡ actualmente en estado: <strong>PENDIENTE</strong>.</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p>Estamos procesando tu recarga. Te enviaremos un <strong>correo de confirmaciÃ³n de la recarga completada y tu factura virtual una vez que tu recarga sea procesada</strong> por nuestro equipo.</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p style="margin-top: 20px;">Â¡Gracias por confiar en Malok Recargas!</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p style="font-size: 0.9em; color: #777;">Si tienes alguna pregunta, contÃ¡ctanos a travÃ©s de nuestro WhatsApp: <a href="https://wa.me/584126949631" style="color: #28a745; text-decoration: none;">+58 412 6949631</a></p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  `,
Â  Â  Â  Â  };

Â  Â  Â  Â  // NOTA: La secciÃ³n para adjuntar el comprobante al correo ha sido removida
Â  Â  Â  Â  // porque la lÃ³gica ahora prioriza enviarlo a Telegram.

Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  await transporter.sendMail(mailOptions);
Â  Â  Â  Â  Â  Â  console.log("Correo de confirmaciÃ³n inicial enviado al cliente:", email);
Â  Â  Â  Â  } catch (emailError) {
Â  Â  Â  Â  Â  Â  console.error("Error al enviar el correo de confirmaciÃ³n inicial:", emailError.message);
Â  Â  Â  Â  Â  Â  if (emailError.response) {
Â  Â  Â  Â  Â  Â  Â  Â  console.error("Detalles del error SMTP:", emailError.response);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  }

Â  Â  // --- Limpieza del archivo temporal despuÃ©s de todo procesamiento ---
Â  Â  if (paymentReceiptFile && paymentReceiptFile.filepath && fs.existsSync(paymentReceiptFile.filepath)) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  fs.unlinkSync(paymentReceiptFile.filepath);
Â  Â  Â  Â  Â  Â  console.log("Archivo temporal del comprobante eliminado al finalizar la funciÃ³n.");
Â  Â  Â  Â  } catch (unlinkError) {
Â  Â  Â  Â  Â  Â  console.error("Error al eliminar el archivo temporal del comprobante:", unlinkError);
Â  Â  Â  Â  }
Â  Â  }

Â  Â  return {
Â  Â  Â  Â  statusCode: 200,
Â  Â  Â  Â  body: JSON.stringify({ message: "Solicitud de pago recibida exitosamente. Â¡Te enviaremos una confirmaciÃ³n pronto!" }),
Â  Â  };
};